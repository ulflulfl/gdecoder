from FileMetaInfos import FileMetaInfos
import pytest
pytestmark = pytest.mark.unittests


def test_decode_comment_line_cura():
    # arrange
    meta_infos = FileMetaInfos()
    line = "Generated with Cura_SteamEngine"

    # act
    meta_infos._decode_comment_line(line)

    # assert
    assert(meta_infos.generator_line) == line
    assert(meta_infos.generator) == "Cura"


def test_decode_comment_line_cura_marlin():
    # arrange
    meta_infos = FileMetaInfos()
    line = ";FLAVOR:Marlin"

    # act
    meta_infos._decode_comment_line(line)

    # assert
    assert(meta_infos.generator_flavor) == "Marlin"


def test_decode_comment_line_sli3er():
    # arrange
    meta_infos = FileMetaInfos()
    line = "; generated by Slic3r"

    # act
    meta_infos._decode_comment_line(line)

    # assert
    assert(meta_infos.generator_line) == line
    assert(meta_infos.generator) == "Slic3r"


def test_decode_comment_line_prusa_slicer():
    # arrange
    meta_infos = FileMetaInfos()
    line = "generated by PrusaSlicer"

    # act
    meta_infos._decode_comment_line(line)

    # assert
    assert(meta_infos.generator_line) == line
    assert(meta_infos.generator) == "PrusaSlicer"


def test__decode_line_empty_line():
    # arrange
    meta_infos = FileMetaInfos()
    line = ""

    # act
    meta_infos._decode_line(line)

    # assert
    assert(meta_infos.generator_line) == ""
    assert(meta_infos.generator) == ""
    assert(meta_infos.longest_line) == 0


def test__decode_line_comment_line():
    # arrange
    meta_infos = FileMetaInfos()
    line = "; abc"

    # act
    meta_infos._decode_line(line)

    # assert
    assert(meta_infos.generator_line) == ""
    assert(meta_infos.generator) == ""
    assert(meta_infos.longest_line) == 0


def test__decode_line_command_line():
    # arrange
    meta_infos = FileMetaInfos()
    line = "abc"

    # act
    meta_infos._decode_line(line)

    # assert
    assert(meta_infos.generator_line) == ""
    assert(meta_infos.generator) == ""
    assert(meta_infos.longest_line) == 3


def test__decode_line_generator_line():
    # arrange
    meta_infos = FileMetaInfos()
    line = "; generated by PrusaSlicer"

    # act
    meta_infos._decode_line(line)

    # assert
    assert(meta_infos.generator_line) == line
    assert(meta_infos.generator) == "PrusaSlicer"
    assert(meta_infos.longest_line) == 0
