from FileMetaInfos import FileMetaInfos


def test_decodeCommentLine_Cura():
    # arrange
    metaInfos = FileMetaInfos()
    line = "Generated with Cura_SteamEngine"

    # act
    metaInfos._decodeCommentLine(line)

    # assert
    assert(metaInfos.generator_line) == line
    assert(metaInfos.generator) == "Cura"


def test_decodeCommentLine_Cura_Marlin():
    # arrange
    metaInfos = FileMetaInfos()
    line = ";FLAVOR:Marlin"

    # act
    metaInfos._decodeCommentLine(line)

    # assert
    assert(metaInfos.generator_flavor) == "Marlin"


def test_decodeCommentLine_Sli3er():
    # arrange
    metaInfos = FileMetaInfos()
    line = "; generated by Slic3r"

    # act
    metaInfos._decodeCommentLine(line)

    # assert
    assert(metaInfos.generator_line) == line
    assert(metaInfos.generator) == "Slic3r"


def test_decodeCommentLine_PrusaSlicer():
    # arrange
    metaInfos = FileMetaInfos()
    line = "generated by PrusaSlicer"

    # act
    metaInfos._decodeCommentLine(line)

    # assert
    assert(metaInfos.generator_line) == line
    assert(metaInfos.generator) == "PrusaSlicer"


def test__decodeLine_emptyLine():
    # arrange
    metaInfos = FileMetaInfos()
    line = ""

    # act
    metaInfos._decodeLine(line)

    # assert
    assert(metaInfos.generator_line) == ""
    assert(metaInfos.generator) == ""
    assert(metaInfos.longestLine) == 0


def test__decodeLine_commentLine():
    # arrange
    metaInfos = FileMetaInfos()
    line = "; abc"

    # act
    metaInfos._decodeLine(line)

    # assert
    assert(metaInfos.generator_line) == ""
    assert(metaInfos.generator) == ""
    assert(metaInfos.longestLine) == 0


def test__decodeLine_commandLine():
    # arrange
    metaInfos = FileMetaInfos()
    line = "abc"

    # act
    metaInfos._decodeLine(line)

    # assert
    assert(metaInfos.generator_line) == ""
    assert(metaInfos.generator) == ""
    assert(metaInfos.longestLine) == 3


def test__decodeLine_generatorLine():
    # arrange
    metaInfos = FileMetaInfos()
    line = "; generated by PrusaSlicer"

    # act
    metaInfos._decodeLine(line)

    # assert
    assert(metaInfos.generator_line) == line
    assert(metaInfos.generator) == "PrusaSlicer"
    assert(metaInfos.longestLine) == 0
